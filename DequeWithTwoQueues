package sortingMethods;


import java.util.LinkedList;
import java.util.Queue;

public class DequeWithTwoQueues {
    private Queue<Integer> frontQueue;
    private Queue<Integer> rearQueue;

    public DequeWithTwoQueues() {
        frontQueue = new LinkedList<>();
        rearQueue = new LinkedList<>();
    }

    public void addFirst(int element) {
        frontQueue.add(element);
    }

    public void addLast(int element) {
        rearQueue.add(element);
    }

    public int removeFirst() {
        if (frontQueue.isEmpty()) {
            while (!rearQueue.isEmpty()) {
                frontQueue.add(rearQueue.poll());
            }
        }
        return frontQueue.poll();
    }

    public int removeLast() {
        if (rearQueue.isEmpty()) {
            while (!frontQueue.isEmpty()) {
                rearQueue.add(frontQueue.poll());
            }
        }
        return rearQueue.poll();
    }

    public boolean isEmpty() {
        return frontQueue.isEmpty() && rearQueue.isEmpty();
    }
}
